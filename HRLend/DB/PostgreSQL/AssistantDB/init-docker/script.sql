create schema assistant;create table assistant.document
(
    id integer primary key generated by default as identity,
    cabinet_id integer not null,
    title text not null,
    elasticsearch_index text not null,

    unique(cabinet_id, title)
);CREATE OR REPLACE FUNCTION assistant.document__get(
		_id integer
	) RETURNS TABLE (
		cabinet_id integer,
		title text,
		elasticsearch_index text
	) AS 
	$$
		BEGIN
			RETURN QUERY 
			SELECT 
				d.cabinet_id AS cabinet_id,
				d.title AS title,
				d.elasticsearch_index AS elasticsearch_index
			FROM assistant.document AS d
			WHERE d.id = _id;
		END;
    $$
	LANGUAGE plpgsql;CREATE OR REPLACE FUNCTION assistant.document__select(
		_cabinet_id integer
	)RETURNS TABLE (
		id integer,
		title text ,
		elasticsearch_index text
	) AS 
	$$
		BEGIN

			RETURN QUERY
				SELECT 
					a.id AS id,
					a.title AS title,
					a.elasticsearch_index AS elasticsearch_index
				FROM assistant.document AS a
				WHERE _cabinet_id = a.cabinet_id;	
		END;	
	$$
	LANGUAGE plpgsql;


CREATE OR REPLACE PROCEDURE assistant.document__delete(
        _id integer
	) AS
	$$		
		BEGIN
			DELETE FROM assistant.document
      		WHERE id = _id;
		END;
    $$
    LANGUAGE plpgsql;CREATE OR REPLACE PROCEDURE assistant.document__insert(
		_cabinet_id integer,
		_title text,
		_elasticsearch_index text,
		out _id_document integer
	) AS
	$$		
		BEGIN
			INSERT INTO assistant.document (
					cabinet_id,
					title,
					elasticsearch_index
				) 
				VALUES (
					_cabinet_id,
					_title,
					_elasticsearch_index
				)
			RETURNING id INTO _id_document;
		END;
    $$
    LANGUAGE plpgsql;