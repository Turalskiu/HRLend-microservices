version: '3.8'

networks:
  demonetwork:

services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=qweasdzxc123987
    ports:
      - 9201:9200
      - 9301:9300
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -fsSL http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 5
      start_period: 10s
    networks:
      - demonetwork

  rabbitmq:
    image: rabbitmq:3.10.7-management
    ports:
      - "5677:5672"
      - "15677:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=qweasdzxc123987
      - RABBITMQ_PLUGINS=rabbitmq_management rabbitmq_jsonrpc_channel
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 2s
      retries: 5
      start_period: 10s
    networks:
      - demonetwork

  mongo-db:
    image: mongo:latest
    container_name: my-mongodb-hrlend
    ports:
      - "27016:27017"
    volumes:
      - habrdb-data:/var/lib/mongodb/data
      - ./init-docker/mongodb:/docker-entrypoint-initdb.d
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_user
      MONGO_INITDB_ROOT_PASSWORD: qweasdzxc123987
      MONGO_INITDB_DATABASE: HRLend
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
    networks:
      - demonetwork

  postgres-db:
    image: postgres:latest
    container_name: my-postgres-hrlend
    environment:
      POSTGRES_DB: HRLend
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qweasdzxc123987
      PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
      - "5431:5432"
    volumes:
      - ./init-docker/postgres:/docker-entrypoint-initdb.d
      - habrdb-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
    networks:
      - demonetwork

  auth:
    container_name: authorization-api
    image: ${DOCKER_REGISTRY-}authorizationapi
    build:
      context: /
      dockerfile: API/Authorization.Api/Dockerfile
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "9081:8080"
    environment:
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB=HRLend
      - DB_USER=postgres
      - DB_PASSWORD=qweasdzxc123987
      - QUEUE_HOST=rabbitmq
      - QUEUE_PORT=5672
      - QUEUE_USER=user
      - QUEUE_PASSWORD=qweasdzxc123987
    volumes: 
      - ./API/Authorization.Api/Resources:/app/Resources
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
    networks:
      - demonetwork

  tg:
    container_name: test-generator-api
    image: ${DOCKER_REGISTRY-}testgeneratorapi
    build:
      context: /
      dockerfile: API/TestGenerator.Api/Dockerfile
    depends_on:
      mongo-db:
        condition: service_healthy
    ports:
      - "9082:8080"
    environment:
      - MONGO_DB_HOST=mongo-db
      - MONGO_DB_PORT=27017
      - MONGO_DB=HRLend
      - MONGO_DB_USER=mongo_user
      - MONGO_DB_PASSWORD=qweasdzxc123987
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
    networks:
      - demonetwork

  kb:
    container_name: knowledge-base-api
    image: ${DOCKER_REGISTRY-}knowledgebaseapi
    build:
      context: /
      dockerfile: API/KnowledgeBase.Api/Dockerfile
    depends_on:
      mongo-db:
        condition: service_healthy
      tg:
        condition: service_healthy
    ports:
      - "9083:8080"
      - "9084:8081"
    environment:
      - MONGO_DB_HOST=mongo-db
      - MONGO_DB_PORT=27017
      - MONGO_DB=HRLend
      - MONGO_DB_USER=mongo_user
      - MONGO_DB_PASSWORD=qweasdzxc123987
      - TG_PORT=8080
      - TG_URL=tg
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
    networks:
      - demonetwork

  tc:
    container_name: test-constructor-api
    image: ${DOCKER_REGISTRY-}testconstructorapi
    build:
      context: /
      dockerfile: API/TestConstructor.Api/Dockerfile
    depends_on:
      postgres-db:
        condition: service_healthy
      tg:
        condition: service_healthy
      kb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "9085:8082"
      - "9086:8083"
    environment:
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB=HRLend
      - DB_USER=postgres
      - DB_PASSWORD=qweasdzxc123987
      - TG_PORT=8080
      - TG_URL=tg
      - KB_PORT=8081
      - KB_URL=kb
      - QUEUE_HOST=rabbitmq
      - QUEUE_PORT=5672
      - QUEUE_USER=user
      - QUEUE_PASSWORD=qweasdzxc123987
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
    networks:
      - demonetwork


  test:
    container_name: test-api
    image: ${DOCKER_REGISTRY-}testapi
    build:
      context: /
      dockerfile: API/Test.Api/Dockerfile
    depends_on:
      postgres-db:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
      tg: 
        condition: service_healthy
      kb:
        condition: service_healthy
      tc:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "9087:8080"
    environment:
      - MONGO_DB_HOST=mongo-db
      - MONGO_DB_PORT=27017
      - MONGO_DB=HRLend
      - MONGO_DB_USER=mongo_user
      - MONGO_DB_PASSWORD=qweasdzxc123987
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB=HRLend
      - DB_USER=postgres
      - DB_PASSWORD=qweasdzxc123987
      - TG_PORT=8080
      - TG_URL=tg
      - TC_PORT=8083
      - TC_URL=tc
      - QUEUE_HOST=rabbitmq
      - QUEUE_PORT=5672
      - QUEUE_USER=user
      - QUEUE_PASSWORD=qweasdzxc123987
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
    volumes: 
      - ./API/Test.Api/Resources:/app/Resources
    networks:
      - demonetwork


  statistic:
    container_name: statistic-api
    image: ${DOCKER_REGISTRY-}statisticapi
    build:
      context: /
      dockerfile: API/Statistic.Api/Dockerfile
    depends_on:
      mongo-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "9088:8080"
    environment:
      - MONGO_DB_HOST=mongo-db
      - MONGO_DB_PORT=27017
      - MONGO_DB=HRLend
      - MONGO_DB_USER=mongo_user
      - MONGO_DB_PASSWORD=qweasdzxc123987
      - QUEUE_HOST=rabbitmq
      - QUEUE_PORT=5672
      - QUEUE_USER=user
      - QUEUE_PASSWORD=qweasdzxc123987
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
    networks:
      - demonetwork

  asistant:
    container_name: assistant-api
    image: ${DOCKER_REGISTRY-}assistantapi
    build:
      context: /
      dockerfile: API/Assistant.Api/Dockerfile
    depends_on:
      postgres-db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    ports:
      - "9089:8080"
    environment:
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB=HRLend
      - DB_USER=postgres
      - DB_PASSWORD=qweasdzxc123987
      - ELASTICSEARCH_DB_HOST=elasticsearch
      - ELASTICSEARCH_DB_PORT=9200
      - ELASTICSEARCH_DB_INDEX=document_index
      - ELASTICSEARCH_DB_USER=elastic
      - ELASTICSEARCH_DB_PASSWORD=qweasdzxc123987
      - GPT_URL=https://ask.chadgpt.ru/api/public/gpt-3.5
      - GPT_KEY=chad-c647e5d4d8fa4f0ca5457d4e62f965812ra1iudl
    volumes: 
      - ./API/Assistant.Api/Resources:/app/Resources
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
    networks:
      - demonetwork

volumes:
  rabbitmq_data:
    driver: local
  esdata:
    driver: local
  habrdb-data:






